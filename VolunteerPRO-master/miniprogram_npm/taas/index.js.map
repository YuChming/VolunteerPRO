{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["const sm2 = require('sm-crypto').sm2;\n\nconst addresses = ['https://node1.taas.internetapi.cn'];\n\n// ServerAddr GetServerAddr()\nlet getServerAddr = function () {\n    if (addresses.length === 1) {\n        return addresses[0];\n    }\n    return addresses[Math.floor(Math.random() * addresses.length)];\n};\n\n// Cred GetCredential()\n// used for network access and data signature\nlet getCredential = function () {\n    let cred = sm2.generateKeyPairHex();\n\n    let publicKey = cred.publicKey;\n    let privateKey = cred.privateKey;\n\n    return {\n        publicKey: publicKey,\n        privateKey: privateKey\n    };\n};\n\n// HashID StoreEvidence(Data, ServerAddr, Cred)\nlet storeEvidence = function (data, serverAddr, cred, callback) {\n\n    let url = (serverAddr === undefined ? getServerAddr() : serverAddr);\n\n    let requestData = {\n        from: cred.publicKey,\n        data: data\n    };\n\n    if (typeof (data) === \"string\") {\n        url += '/uploadMessage';\n        requestData.sig = signature(data, cred);\n        requestData.type = 'text';\n\n        return messagePost(url, requestData, callback);\n    } else if (data instanceof File) {\n        url += '/uploadFile';\n        requestData.sig = signature(data.toString(), cred);\n\n        return filePost(url, requestData, callback);\n    } else {\n        throw DOMException;\n    }\n};\n\n// Data QueryEvidence(HashID, ServerAddr, Cred)\nlet queryEvidence = function (hashId, serverAddr, cred, callback) {\n\n    let url = `${(serverAddr === undefined ? getServerAddr() : serverAddr)}/queryData`;\n    return messagePost(url, {hash: hashId}, callback);\n};\n\nlet signature = function (text, cred) {\n\n    return sm2.doSignature(text, cred.privateKey);\n};\n\nlet messagePost = function (url, body, callback) {\n\n    let options = {\n        url: url,\n        method: \"POST\",\n        timeout: 0,\n        header: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        data: body,\n        success: function (response) {\n            // uploadMessage\n            // response.data = {code, data: {hash, sig}}\n            // queryData\n            // response.data = {code, data: {data: {sig, data, text, type}, from, sig, timestamp}}\n            console.log(response);\n            if (callback) {\n                callback(response.data.data);\n            }\n        }\n    };\n\n    wx.request(options);\n};\n\nlet filePost = function (url, body, callback) {\n\n    let form_data = new FormData();\n    for (let i in body) {\n        form_data.append(i, body[i]);\n    }\n\n    let options = {\n        url: url,\n        timeout: 0,\n        contentType: false,\n        mimeType: \"multipart/form-data\",\n        processData: false,\n        data: form_data,\n        success: function (response) {\n            // uploadFile\n            // response = {code, data: {hash, sig}}\n            console.log(callback);\n            if (callback) {\n                callback(response.data);\n            }\n        }\n    };\n\n    return $.post(options);\n};\n\nmodule.exports = {\n    version: \"0.1.1\",\n    getServerAddr: getServerAddr,\n    getCredential: getCredential,\n    storeEvidence: storeEvidence,\n    queryEvidence: queryEvidence\n};"]}